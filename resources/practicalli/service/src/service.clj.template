;; ---------------------------------------------------------
;; {{top/ns}}.{{main/ns}}
;;
;; {{description}}
;;
;; Start the service using `(start)` in the rich comment form
;;
;; The service consist of
;; - httpkit web application server
;; - metosin/reitit for routing and ring for request / response management
;; - mulog event logging service
;; ---------------------------------------------------------

(ns {{top/ns}}.{{main/ns}}.service
  "Gameboard service"
  (:gen-class)
  (:require
   ;; Requests
   [{{top/ns}}.{{main/ns}}.router :as router]

   ;; System dependencies
   [org.httpkit.server     :as http-server]
   [com.brunobonacci.mulog :as mulog]))

;; ---------------------------------------------------------
;; HTTP Server

(defn http-server-start
  "Start the application server and run the application"
  [port]
  (http-server/run-server #'router/app {:port port}))

;; End of HTTP Server
;; ---------------------------------------------------------


;; --------------------------------------------------
;; Application entry point

(defn -main
  "{{top/ns}} {{main/ns}} service providing the foundation of an API.
  The shutdown hook gracefully stops the service on receipt of a SIGTERM from the infrastructure,
  giving the application 30 seconds before forced termination."
  []

  (mulog/set-global-context!
   {:app-name "{{top/ns}} {{main/ns}} service" :version  "0.1.0"})

  (let [port (Integer/parseInt (or port
                                   (System/getenv "PORT")
                                   8080))]
   
    (running-system (http-server-start port))

    (.addShutdownHook
     (Runtime/getRuntime)
     (Thread. ^Runnable #(running-system :timeout 100)))))
;; --------------------------------------------------


;; --------------------------------------------------
;; Example clojure.exec function

#_{:clj-kondo/ignore [:clojure-lsp/unused-public-var]}
(defn greet
  "Greeting message via Clojure CLI clojure.exec"
  ;; TODO: call greet with hash-map argument
  ([] (greet "secret engineering"))
  ([{:keys [team-name]}]
   (str "{{top/ns}} {{main/ns}} service developed by the " team-name " team")))


(comment
  ;; --------------------------------------------------
  ;; REPL workflow commands

  (greet {:team-name "{{developer}}"}))

   ; End of rich comment
