;; ---------------------------------------------------------
;; {{top/ns}}.{{main/ns}}
;;
;; {{description}}
;;
;; Start the service using Integrant configuration and an environment profile.
;; A profile is injected into the configuration in the `practicalli.gameboard.environment` namespace
;; and the resulting configuration is used by Integrant to start the system components
;;
;; The service consist of
;; - httpkit web application server
;; - metosin/reitit for routing and ring for request / response management
;; - mulog event logging service
;;
;; Related namespaces
;; `resources/config.edn` system configuration with environment #profile placeholders
;; `{{top/ns}}.environment` injects profile & other aero tag values into a resulting configuration
;; ---------------------------------------------------------


(ns {{top/ns}}.{{main/ns}}.service
  "Gameboard service component lifecycle management"
  (:gen-class)
  (:require

   ;; Component system
   [{{top/ns}}.{{main/ns}}.system :as system]

   ;; System dependencies
   [org.httpkit.server     :as http-server]
   [integrant.core         :as ig]
   [com.brunobonacci.mulog :as mulog]))

;; --------------------------------------------------
;; Application entry point

(defn -main
  "{{top/ns}} {{main/ns}} service is started with `ig/init` and the Integrant configuration,
  with the return value bound to the namespace level `system` name.
  Aero is used to configure Integrant configuration based on profile (dev, test, prod),
  allowing environment specific configuration, e.g. mulog publisher
  The shutdown hook calling a zero arity function, gracefully stopping the service
  on receipt of a SIGTERM from the infrastructure, giving the application 30 seconds before forced termination."
  []

  (let [profile (or (keyword (System/getenv "SERVICE_PROFILE"))
                    :dev)

        ;; Add keys to every event / publish profile use to start the service
        _ (mulog/set-global-context!
           {:app-name "{{top/ns}} {{main/ns}} service" :version  "0.1.0" :env profile})

        running-system (system/initialise profile)

        _ (mulog/log ::gameboard-system :system-config running-system)]

    ;; TODO: capture the reason for the shutdown - i.e. can we capture the sigterm
    (.addShutdownHook (Runtime/getRuntime) (Thread. ^Runnable #(system/stop running-system)))))

;; --------------------------------------------------
;; Example clojure.exec function

#_{:clj-kondo/ignore [:clojure-lsp/unused-public-var]}
(defn greet
  "Greeting message via Clojure CLI clojure.exec"
  ;; TODO: call greet with hash-map argument
  ([] (greet "secret engineering"))
  ([{:keys [team-name]}]
   (str "{{top/ns}} {{main/ns}} service developed by the " team-name " team")))


(comment
  ;; --------------------------------------------------
  ;; REPL workflow commands

  (greet {:team-name "{{developer}}"}))

   ; End of rich comment
